// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/18/2019 04:58:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab3_3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab3_3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg aset;
reg clk;
reg [3:0] din;
reg dir;
reg load;
reg sclrr;
// wires                                               
wire ena;
wire [3:0] led;
wire [9:4] led0;

// assign statements (if any)                          
lab3_3 i1 (
// port map - connection between master ports and signals/registers   
	.aset(aset),
	.clk(clk),
	.din(din),
	.dir(dir),
	.ena(ena),
	.led(led),
	.led0(led0),
	.load(load),
	.sclrr(sclrr)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// din[ 3 ]
initial
begin
	din[3] = 1'b1;
end 
// din[ 2 ]
initial
begin
	din[2] = 1'b1;
end 
// din[ 1 ]
initial
begin
	din[1] = 1'b0;
end 
// din[ 0 ]
initial
begin
	din[0] = 1'b1;
end 

// aset
initial
begin
	aset = 1'b0;
	aset = #20000 1'b1;
end 

// sclrr
initial
begin
	sclrr = 1'b1;
	sclrr = #80000 1'b0;
	sclrr = #70000 1'b1;
end 

// dir
initial
begin
	dir = 1'b1;
	dir = #670000 1'b0;
end 

// load
initial
begin
	load = 1'b0;
	load = #210000 1'b1;
	load = #40000 1'b0;
end 
endmodule


// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/11/2019 21:43:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          elab_6
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module elab_6_vlg_vec_tst();
// constants                                           
// general purpose registers
reg pba;
reg sw_1_3;
reg sw_1_2;
reg sw_1_1;
reg sw_1_0;
reg sw_0_3;
reg sw_0_2;
reg sw_0_1;
reg sw_0_0;
// wires                                               
wire [3:0] led;

// assign statements (if any)                          
elab_6 i1 (
// port map - connection between master ports and signals/registers   
	.led(led),
	.pba(pba),
	.sw_1_3(sw_1_3),
	.sw_1_2(sw_1_2),
	.sw_1_1(sw_1_1),
	.sw_1_0(sw_1_0),
	.sw_0_3(sw_0_3),
	.sw_0_2(sw_0_2),
	.sw_0_1(sw_0_1),
	.sw_0_0(sw_0_0)
);
initial 
begin 
#1000000 $finish;
end 

// sw[1][3]
initial
begin
	sw_1_3 = 1'b1;
end 

// sw[1][2]
initial
begin
	sw_1_2 = 1'b0;
end 

// sw[1][1]
initial
begin
	sw_1_1 = 1'b1;
end 

// sw[1][0]
initial
begin
	sw_1_0 = 1'b0;
end 

// sw[0][3]
initial
begin
	sw_0_3 = 1'b0;
end 

// sw[0][2]
initial
begin
	sw_0_2 = 1'b1;
end 

// sw[0][1]
initial
begin
	sw_0_1 = 1'b0;
end 

// sw[0][0]
initial
begin
	sw_0_0 = 1'b1;
end 

// pba
initial
begin
	pba = 1'b0;
	pba = #400000 1'b1;
	pba = #400000 1'b0;
end 
endmodule


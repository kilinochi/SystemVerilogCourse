// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2019 13:10:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab1_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab1_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg b0;
reg b1;
// wires                                               
wire eq;

// assign statements (if any)                          
lab1_1 i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.b0(b0),
	.b1(b1),
	.eq(eq)
);
initial 
begin 
#1000000 $finish;
end 

// a0
initial
begin
	a0 = 1'b0;
	a0 = #320000 1'b1;
	a0 = #320000 1'b0;
	a0 = #320000 1'b1;
end 

// a1
initial
begin
	repeat(3)
	begin
		a1 = 1'b0;
		a1 = #160000 1'b1;
		# 160000;
	end
	a1 = 1'b0;
end 

// b0
initial
begin
	repeat(6)
	begin
		b0 = 1'b0;
		b0 = #80000 1'b1;
		# 80000;
	end
	b0 = 1'b0;
end 

// b1
initial
begin
	repeat(12)
	begin
		b1 = 1'b0;
		b1 = #40000 1'b1;
		# 40000;
	end
	b1 = 1'b0;
end 
endmodule


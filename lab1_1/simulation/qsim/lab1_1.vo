// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.1.2 Build 203 01/18/2017 SJ Standard Edition"

// DATE "02/22/2019 13:10:23"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lab1_1 (
	a0,
	a1,
	b0,
	b1,
	eq);
input 	a0;
input 	a1;
input 	b0;
input 	b1;
output 	eq;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \eq~output_o ;
wire \a0~input_o ;
wire \b0~input_o ;
wire \a1~input_o ;
wire \b1~input_o ;
wire \eq~0_combout ;


cyclonev_io_obuf \eq~output (
	.i(!\eq~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\eq~output_o ),
	.obar());
// synopsys translate_off
defparam \eq~output .bus_hold = "false";
defparam \eq~output .open_drain_output = "false";
defparam \eq~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \a0~input (
	.i(a0),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a0~input_o ));
// synopsys translate_off
defparam \a0~input .bus_hold = "false";
defparam \a0~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \b0~input (
	.i(b0),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\b0~input_o ));
// synopsys translate_off
defparam \b0~input .bus_hold = "false";
defparam \b0~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \a1~input (
	.i(a1),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\a1~input_o ));
// synopsys translate_off
defparam \a1~input .bus_hold = "false";
defparam \a1~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \b1~input (
	.i(b1),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\b1~input_o ));
// synopsys translate_off
defparam \b1~input .bus_hold = "false";
defparam \b1~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \eq~0 (
// Equation(s):
// \eq~0_combout  = (!\a0~input_o  & ((!\a1~input_o  $ (!\b1~input_o )) # (\b0~input_o ))) # (\a0~input_o  & ((!\b0~input_o ) # (!\a1~input_o  $ (!\b1~input_o ))))

	.dataa(!\a0~input_o ),
	.datab(!\b0~input_o ),
	.datac(!\a1~input_o ),
	.datad(!\b1~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\eq~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \eq~0 .extended_lut = "off";
defparam \eq~0 .lut_mask = 64'h6FF66FF66FF66FF6;
defparam \eq~0 .shared_arith = "off";
// synopsys translate_on

assign eq = \eq~output_o ;

endmodule

// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.1.0 Build 196 10/24/2016 SJ Lite Edition"

// DATE "05/07/2019 21:36:09"

// 
// Device: Altera 5CSEMA5F31C6 Package FBGA896
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lab6_1 (
	arst,
	ena,
	clk,
	da,
	db,
	res);
input 	arst;
input 	ena;
input 	clk;
input 	[3:0] da;
input 	[3:0] db;
output 	[7:0] res;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \mul|Mult0~8 ;
wire \mul|Mult0~9 ;
wire \mul|Mult0~10 ;
wire \mul|Mult0~11 ;
wire \mul|Mult0~12 ;
wire \mul|Mult0~13 ;
wire \mul|Mult0~14 ;
wire \mul|Mult0~15 ;
wire \mul|Mult0~16 ;
wire \mul|Mult0~17 ;
wire \mul|Mult0~18 ;
wire \mul|Mult0~19 ;
wire \mul|Mult0~20 ;
wire \mul|Mult0~21 ;
wire \mul|Mult0~22 ;
wire \mul|Mult0~23 ;
wire \mul|Mult0~24 ;
wire \mul|Mult0~25 ;
wire \mul|Mult0~26 ;
wire \mul|Mult0~27 ;
wire \mul|Mult0~28 ;
wire \mul|Mult0~29 ;
wire \mul|Mult0~30 ;
wire \mul|Mult0~31 ;
wire \mul|Mult0~32 ;
wire \mul|Mult0~33 ;
wire \mul|Mult0~34 ;
wire \mul|Mult0~35 ;
wire \mul|Mult0~36 ;
wire \mul|Mult0~37 ;
wire \mul|Mult0~38 ;
wire \mul|Mult0~39 ;
wire \mul|Mult0~40 ;
wire \mul|Mult0~41 ;
wire \mul|Mult0~42 ;
wire \mul|Mult0~43 ;
wire \mul|Mult0~44 ;
wire \mul|Mult0~45 ;
wire \mul|Mult0~46 ;
wire \mul|Mult0~47 ;
wire \mul|Mult0~48 ;
wire \mul|Mult0~49 ;
wire \mul|Mult0~50 ;
wire \mul|Mult0~51 ;
wire \mul|Mult0~52 ;
wire \mul|Mult0~53 ;
wire \mul|Mult0~54 ;
wire \mul|Mult0~55 ;
wire \mul|Mult0~56 ;
wire \mul|Mult0~57 ;
wire \mul|Mult0~58 ;
wire \mul|Mult0~59 ;
wire \mul|Mult0~60 ;
wire \mul|Mult0~61 ;
wire \mul|Mult0~62 ;
wire \mul|Mult0~63 ;
wire \res[0]~output_o ;
wire \res[1]~output_o ;
wire \res[2]~output_o ;
wire \res[3]~output_o ;
wire \res[4]~output_o ;
wire \res[5]~output_o ;
wire \res[6]~output_o ;
wire \res[7]~output_o ;
wire \clk~input_o ;
wire \da[0]~input_o ;
wire \arst~input_o ;
wire \ena~input_o ;
wire \da[1]~input_o ;
wire \da[2]~input_o ;
wire \da[3]~input_o ;
wire \db[0]~input_o ;
wire \db[1]~input_o ;
wire \db[2]~input_o ;
wire \db[3]~input_o ;
wire [7:0] \mul|res ;
wire [3:0] \in_rg_2|q ;
wire [7:0] \out_rg|q ;
wire [3:0] \in_rg_1|q ;

wire [63:0] \mul|Mult0~mac_RESULTA_bus ;

assign \mul|res [0] = \mul|Mult0~mac_RESULTA_bus [0];
assign \mul|res [1] = \mul|Mult0~mac_RESULTA_bus [1];
assign \mul|res [2] = \mul|Mult0~mac_RESULTA_bus [2];
assign \mul|res [3] = \mul|Mult0~mac_RESULTA_bus [3];
assign \mul|res [4] = \mul|Mult0~mac_RESULTA_bus [4];
assign \mul|res [5] = \mul|Mult0~mac_RESULTA_bus [5];
assign \mul|res [6] = \mul|Mult0~mac_RESULTA_bus [6];
assign \mul|res [7] = \mul|Mult0~mac_RESULTA_bus [7];
assign \mul|Mult0~8  = \mul|Mult0~mac_RESULTA_bus [8];
assign \mul|Mult0~9  = \mul|Mult0~mac_RESULTA_bus [9];
assign \mul|Mult0~10  = \mul|Mult0~mac_RESULTA_bus [10];
assign \mul|Mult0~11  = \mul|Mult0~mac_RESULTA_bus [11];
assign \mul|Mult0~12  = \mul|Mult0~mac_RESULTA_bus [12];
assign \mul|Mult0~13  = \mul|Mult0~mac_RESULTA_bus [13];
assign \mul|Mult0~14  = \mul|Mult0~mac_RESULTA_bus [14];
assign \mul|Mult0~15  = \mul|Mult0~mac_RESULTA_bus [15];
assign \mul|Mult0~16  = \mul|Mult0~mac_RESULTA_bus [16];
assign \mul|Mult0~17  = \mul|Mult0~mac_RESULTA_bus [17];
assign \mul|Mult0~18  = \mul|Mult0~mac_RESULTA_bus [18];
assign \mul|Mult0~19  = \mul|Mult0~mac_RESULTA_bus [19];
assign \mul|Mult0~20  = \mul|Mult0~mac_RESULTA_bus [20];
assign \mul|Mult0~21  = \mul|Mult0~mac_RESULTA_bus [21];
assign \mul|Mult0~22  = \mul|Mult0~mac_RESULTA_bus [22];
assign \mul|Mult0~23  = \mul|Mult0~mac_RESULTA_bus [23];
assign \mul|Mult0~24  = \mul|Mult0~mac_RESULTA_bus [24];
assign \mul|Mult0~25  = \mul|Mult0~mac_RESULTA_bus [25];
assign \mul|Mult0~26  = \mul|Mult0~mac_RESULTA_bus [26];
assign \mul|Mult0~27  = \mul|Mult0~mac_RESULTA_bus [27];
assign \mul|Mult0~28  = \mul|Mult0~mac_RESULTA_bus [28];
assign \mul|Mult0~29  = \mul|Mult0~mac_RESULTA_bus [29];
assign \mul|Mult0~30  = \mul|Mult0~mac_RESULTA_bus [30];
assign \mul|Mult0~31  = \mul|Mult0~mac_RESULTA_bus [31];
assign \mul|Mult0~32  = \mul|Mult0~mac_RESULTA_bus [32];
assign \mul|Mult0~33  = \mul|Mult0~mac_RESULTA_bus [33];
assign \mul|Mult0~34  = \mul|Mult0~mac_RESULTA_bus [34];
assign \mul|Mult0~35  = \mul|Mult0~mac_RESULTA_bus [35];
assign \mul|Mult0~36  = \mul|Mult0~mac_RESULTA_bus [36];
assign \mul|Mult0~37  = \mul|Mult0~mac_RESULTA_bus [37];
assign \mul|Mult0~38  = \mul|Mult0~mac_RESULTA_bus [38];
assign \mul|Mult0~39  = \mul|Mult0~mac_RESULTA_bus [39];
assign \mul|Mult0~40  = \mul|Mult0~mac_RESULTA_bus [40];
assign \mul|Mult0~41  = \mul|Mult0~mac_RESULTA_bus [41];
assign \mul|Mult0~42  = \mul|Mult0~mac_RESULTA_bus [42];
assign \mul|Mult0~43  = \mul|Mult0~mac_RESULTA_bus [43];
assign \mul|Mult0~44  = \mul|Mult0~mac_RESULTA_bus [44];
assign \mul|Mult0~45  = \mul|Mult0~mac_RESULTA_bus [45];
assign \mul|Mult0~46  = \mul|Mult0~mac_RESULTA_bus [46];
assign \mul|Mult0~47  = \mul|Mult0~mac_RESULTA_bus [47];
assign \mul|Mult0~48  = \mul|Mult0~mac_RESULTA_bus [48];
assign \mul|Mult0~49  = \mul|Mult0~mac_RESULTA_bus [49];
assign \mul|Mult0~50  = \mul|Mult0~mac_RESULTA_bus [50];
assign \mul|Mult0~51  = \mul|Mult0~mac_RESULTA_bus [51];
assign \mul|Mult0~52  = \mul|Mult0~mac_RESULTA_bus [52];
assign \mul|Mult0~53  = \mul|Mult0~mac_RESULTA_bus [53];
assign \mul|Mult0~54  = \mul|Mult0~mac_RESULTA_bus [54];
assign \mul|Mult0~55  = \mul|Mult0~mac_RESULTA_bus [55];
assign \mul|Mult0~56  = \mul|Mult0~mac_RESULTA_bus [56];
assign \mul|Mult0~57  = \mul|Mult0~mac_RESULTA_bus [57];
assign \mul|Mult0~58  = \mul|Mult0~mac_RESULTA_bus [58];
assign \mul|Mult0~59  = \mul|Mult0~mac_RESULTA_bus [59];
assign \mul|Mult0~60  = \mul|Mult0~mac_RESULTA_bus [60];
assign \mul|Mult0~61  = \mul|Mult0~mac_RESULTA_bus [61];
assign \mul|Mult0~62  = \mul|Mult0~mac_RESULTA_bus [62];
assign \mul|Mult0~63  = \mul|Mult0~mac_RESULTA_bus [63];

cyclonev_io_obuf \res[0]~output (
	.i(\out_rg|q [0]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[0]~output .bus_hold = "false";
defparam \res[0]~output .open_drain_output = "false";
defparam \res[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \res[1]~output (
	.i(\out_rg|q [1]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[1]~output .bus_hold = "false";
defparam \res[1]~output .open_drain_output = "false";
defparam \res[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \res[2]~output (
	.i(\out_rg|q [2]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[2]~output .bus_hold = "false";
defparam \res[2]~output .open_drain_output = "false";
defparam \res[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \res[3]~output (
	.i(\out_rg|q [3]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[3]~output .bus_hold = "false";
defparam \res[3]~output .open_drain_output = "false";
defparam \res[3]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \res[4]~output (
	.i(\out_rg|q [4]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[4]~output .bus_hold = "false";
defparam \res[4]~output .open_drain_output = "false";
defparam \res[4]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \res[5]~output (
	.i(\out_rg|q [5]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[5]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[5]~output .bus_hold = "false";
defparam \res[5]~output .open_drain_output = "false";
defparam \res[5]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \res[6]~output (
	.i(\out_rg|q [6]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[6]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[6]~output .bus_hold = "false";
defparam \res[6]~output .open_drain_output = "false";
defparam \res[6]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \res[7]~output (
	.i(\out_rg|q [7]),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\res[7]~output_o ),
	.obar());
// synopsys translate_off
defparam \res[7]~output .bus_hold = "false";
defparam \res[7]~output .open_drain_output = "false";
defparam \res[7]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \clk~input (
	.i(clk),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\clk~input_o ));
// synopsys translate_off
defparam \clk~input .bus_hold = "false";
defparam \clk~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \da[0]~input (
	.i(da[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\da[0]~input_o ));
// synopsys translate_off
defparam \da[0]~input .bus_hold = "false";
defparam \da[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \arst~input (
	.i(arst),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\arst~input_o ));
// synopsys translate_off
defparam \arst~input .bus_hold = "false";
defparam \arst~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \ena~input (
	.i(ena),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\ena~input_o ));
// synopsys translate_off
defparam \ena~input .bus_hold = "false";
defparam \ena~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_1|q[0] (
	.clk(\clk~input_o ),
	.d(\da[0]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_1|q [0]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_1|q[0] .is_wysiwyg = "true";
defparam \in_rg_1|q[0] .power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \da[1]~input (
	.i(da[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\da[1]~input_o ));
// synopsys translate_off
defparam \da[1]~input .bus_hold = "false";
defparam \da[1]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_1|q[1] (
	.clk(\clk~input_o ),
	.d(\da[1]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_1|q [1]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_1|q[1] .is_wysiwyg = "true";
defparam \in_rg_1|q[1] .power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \da[2]~input (
	.i(da[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\da[2]~input_o ));
// synopsys translate_off
defparam \da[2]~input .bus_hold = "false";
defparam \da[2]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_1|q[2] (
	.clk(\clk~input_o ),
	.d(\da[2]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_1|q [2]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_1|q[2] .is_wysiwyg = "true";
defparam \in_rg_1|q[2] .power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \da[3]~input (
	.i(da[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\da[3]~input_o ));
// synopsys translate_off
defparam \da[3]~input .bus_hold = "false";
defparam \da[3]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_1|q[3] (
	.clk(\clk~input_o ),
	.d(\da[3]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_1|q [3]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_1|q[3] .is_wysiwyg = "true";
defparam \in_rg_1|q[3] .power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \db[0]~input (
	.i(db[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\db[0]~input_o ));
// synopsys translate_off
defparam \db[0]~input .bus_hold = "false";
defparam \db[0]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_2|q[0] (
	.clk(\clk~input_o ),
	.d(\db[0]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_2|q [0]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_2|q[0] .is_wysiwyg = "true";
defparam \in_rg_2|q[0] .power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \db[1]~input (
	.i(db[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\db[1]~input_o ));
// synopsys translate_off
defparam \db[1]~input .bus_hold = "false";
defparam \db[1]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_2|q[1] (
	.clk(\clk~input_o ),
	.d(\db[1]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_2|q [1]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_2|q[1] .is_wysiwyg = "true";
defparam \in_rg_2|q[1] .power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \db[2]~input (
	.i(db[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\db[2]~input_o ));
// synopsys translate_off
defparam \db[2]~input .bus_hold = "false";
defparam \db[2]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_2|q[2] (
	.clk(\clk~input_o ),
	.d(\db[2]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_2|q [2]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_2|q[2] .is_wysiwyg = "true";
defparam \in_rg_2|q[2] .power_up = "low";
// synopsys translate_on

cyclonev_io_ibuf \db[3]~input (
	.i(db[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\db[3]~input_o ));
// synopsys translate_off
defparam \db[3]~input .bus_hold = "false";
defparam \db[3]~input .simulate_z_as = "z";
// synopsys translate_on

dffeas \in_rg_2|q[3] (
	.clk(\clk~input_o ),
	.d(\db[3]~input_o ),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\in_rg_2|q [3]),
	.prn(vcc));
// synopsys translate_off
defparam \in_rg_2|q[3] .is_wysiwyg = "true";
defparam \in_rg_2|q[3] .power_up = "low";
// synopsys translate_on

cyclonev_mac \mul|Mult0~mac (
	.sub(gnd),
	.negate(gnd),
	.accumulate(gnd),
	.loadconst(gnd),
	.ax({\in_rg_1|q [3],\in_rg_1|q [2],\in_rg_1|q [1],\in_rg_1|q [0]}),
	.ay({\in_rg_2|q [3],\in_rg_2|q [2],\in_rg_2|q [1],\in_rg_2|q [0]}),
	.az(26'b00000000000000000000000000),
	.bx(18'b000000000000000000),
	.by(19'b0000000000000000000),
	.bz(18'b000000000000000000),
	.coefsela(3'b000),
	.coefselb(3'b000),
	.clk(3'b000),
	.aclr(2'b00),
	.ena(3'b111),
	.scanin(27'b000000000000000000000000000),
	.chainin(1'b0),
	.dftout(),
	.resulta(\mul|Mult0~mac_RESULTA_bus ),
	.resultb(),
	.scanout(),
	.chainout());
// synopsys translate_off
defparam \mul|Mult0~mac .accumulate_clock = "none";
defparam \mul|Mult0~mac .ax_clock = "none";
defparam \mul|Mult0~mac .ax_width = 4;
defparam \mul|Mult0~mac .ay_scan_in_clock = "none";
defparam \mul|Mult0~mac .ay_scan_in_width = 4;
defparam \mul|Mult0~mac .ay_use_scan_in = "false";
defparam \mul|Mult0~mac .az_clock = "none";
defparam \mul|Mult0~mac .bx_clock = "none";
defparam \mul|Mult0~mac .by_clock = "none";
defparam \mul|Mult0~mac .by_use_scan_in = "false";
defparam \mul|Mult0~mac .bz_clock = "none";
defparam \mul|Mult0~mac .coef_a_0 = 0;
defparam \mul|Mult0~mac .coef_a_1 = 0;
defparam \mul|Mult0~mac .coef_a_2 = 0;
defparam \mul|Mult0~mac .coef_a_3 = 0;
defparam \mul|Mult0~mac .coef_a_4 = 0;
defparam \mul|Mult0~mac .coef_a_5 = 0;
defparam \mul|Mult0~mac .coef_a_6 = 0;
defparam \mul|Mult0~mac .coef_a_7 = 0;
defparam \mul|Mult0~mac .coef_b_0 = 0;
defparam \mul|Mult0~mac .coef_b_1 = 0;
defparam \mul|Mult0~mac .coef_b_2 = 0;
defparam \mul|Mult0~mac .coef_b_3 = 0;
defparam \mul|Mult0~mac .coef_b_4 = 0;
defparam \mul|Mult0~mac .coef_b_5 = 0;
defparam \mul|Mult0~mac .coef_b_6 = 0;
defparam \mul|Mult0~mac .coef_b_7 = 0;
defparam \mul|Mult0~mac .coef_sel_a_clock = "none";
defparam \mul|Mult0~mac .coef_sel_b_clock = "none";
defparam \mul|Mult0~mac .delay_scan_out_ay = "false";
defparam \mul|Mult0~mac .delay_scan_out_by = "false";
defparam \mul|Mult0~mac .enable_double_accum = "false";
defparam \mul|Mult0~mac .load_const_clock = "none";
defparam \mul|Mult0~mac .load_const_value = 0;
defparam \mul|Mult0~mac .mode_sub_location = 0;
defparam \mul|Mult0~mac .negate_clock = "none";
defparam \mul|Mult0~mac .operand_source_max = "input";
defparam \mul|Mult0~mac .operand_source_may = "input";
defparam \mul|Mult0~mac .operand_source_mbx = "input";
defparam \mul|Mult0~mac .operand_source_mby = "input";
defparam \mul|Mult0~mac .operation_mode = "m9x9";
defparam \mul|Mult0~mac .output_clock = "none";
defparam \mul|Mult0~mac .preadder_subtract_a = "false";
defparam \mul|Mult0~mac .preadder_subtract_b = "false";
defparam \mul|Mult0~mac .result_a_width = 64;
defparam \mul|Mult0~mac .signed_max = "false";
defparam \mul|Mult0~mac .signed_may = "false";
defparam \mul|Mult0~mac .signed_mbx = "false";
defparam \mul|Mult0~mac .signed_mby = "false";
defparam \mul|Mult0~mac .sub_clock = "none";
defparam \mul|Mult0~mac .use_chainadder = "false";
// synopsys translate_on

dffeas \out_rg|q[0] (
	.clk(\clk~input_o ),
	.d(\mul|res [0]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [0]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[0] .is_wysiwyg = "true";
defparam \out_rg|q[0] .power_up = "low";
// synopsys translate_on

dffeas \out_rg|q[1] (
	.clk(\clk~input_o ),
	.d(\mul|res [1]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [1]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[1] .is_wysiwyg = "true";
defparam \out_rg|q[1] .power_up = "low";
// synopsys translate_on

dffeas \out_rg|q[2] (
	.clk(\clk~input_o ),
	.d(\mul|res [2]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [2]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[2] .is_wysiwyg = "true";
defparam \out_rg|q[2] .power_up = "low";
// synopsys translate_on

dffeas \out_rg|q[3] (
	.clk(\clk~input_o ),
	.d(\mul|res [3]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [3]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[3] .is_wysiwyg = "true";
defparam \out_rg|q[3] .power_up = "low";
// synopsys translate_on

dffeas \out_rg|q[4] (
	.clk(\clk~input_o ),
	.d(\mul|res [4]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [4]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[4] .is_wysiwyg = "true";
defparam \out_rg|q[4] .power_up = "low";
// synopsys translate_on

dffeas \out_rg|q[5] (
	.clk(\clk~input_o ),
	.d(\mul|res [5]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [5]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[5] .is_wysiwyg = "true";
defparam \out_rg|q[5] .power_up = "low";
// synopsys translate_on

dffeas \out_rg|q[6] (
	.clk(\clk~input_o ),
	.d(\mul|res [6]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [6]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[6] .is_wysiwyg = "true";
defparam \out_rg|q[6] .power_up = "low";
// synopsys translate_on

dffeas \out_rg|q[7] (
	.clk(\clk~input_o ),
	.d(\mul|res [7]),
	.asdata(vcc),
	.clrn(\arst~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\ena~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\out_rg|q [7]),
	.prn(vcc));
// synopsys translate_off
defparam \out_rg|q[7] .is_wysiwyg = "true";
defparam \out_rg|q[7] .power_up = "low";
// synopsys translate_on

assign res[0] = \res[0]~output_o ;

assign res[1] = \res[1]~output_o ;

assign res[2] = \res[2]~output_o ;

assign res[3] = \res[3]~output_o ;

assign res[4] = \res[4]~output_o ;

assign res[5] = \res[5]~output_o ;

assign res[6] = \res[6]~output_o ;

assign res[7] = \res[7]~output_o ;

endmodule
